#include <iostream>
#include <algorithm>
using namespace std;

struct Node{
    Node* left;
    Node* right;
    int key;
};

Node* NewNode(int key)
{
    Node* node = new Node();
    node->key = key;
    node->left = nullptr;
    node->right = nullptr;
    return node;
}

Node* Built(int A[], int start, int end)
{
    if(start>end)
        return nullptr;
    int mid = ((start+end)/2);
    Node* root = NewNode(A[mid]);
    root->left = Built(A,start,mid-1);
    root->right = Built(A,mid+1,end);
    return root;
}

void InOrder(Node* root)
{
    if(root != nullptr)
    {
        InOrder(root->left);
        cout<<root->key;
        InOrder(root->right);
    }

}

void PreOrder(Node* root)
{
    if(root != nullptr)
    {
        cout<<root->key;
        PreOrder(root->left);
        PreOrder(root->right);
    }
}

Node* Max(Node* node)
{
    Node* current = node;
    cout<<"Ścieżka: ";
    while(current->right != nullptr)
    {
        cout<<current->key<<" ";
        current=current->right;
    }
    cout<<endl;
    return current;
}

Node* Dodaj(Node* root, int key)
{
    if(root != nullptr)
    {
        if(key>root->key)
            root->right = Dodaj(root->right, key);
        if(key<root->key)
            root->left = Dodaj(root->left, key);
    }
    else
        return(NewNode(key));

    return root;
}


void postorderDelete(Node* root) {
    if (root == nullptr) {
        return;
    }
    postorderDelete(root->left);
    postorderDelete(root->right);
    root->left=nullptr;
    root->right=nullptr;
    delete(root);
}



int main()
{
    int A[]={0,1,3,4,6,8,9};
    int N=7;

    Node* root = Built(A,0,N-1);
//    cout<<root->key;
    cout<<"Preorder: ";
    PreOrder(root);
    cout<<endl;
    cout<<"Inorder: ";
    InOrder(root);
    cout<<endl;
    cout<<"Wartość max: "<<Max(root)->key<<endl;

    root=Dodaj(root,2);
    InOrder(root);
    cout<<endl;
    root=Dodaj(root,5);
    InOrder(root);
    cout<<endl;
    root=Dodaj(root,10);
    InOrder(root);
    cout<<endl;
    cout<<"Wartość max: "<<Max(root)->key<<endl;


    postorderDelete(root);
    cout<<endl;
    cout<<root->key;
    cout<<endl;
    return 0;
}
void postorderDelete(Node* root) {
    if (root == nullptr) {
        return;
    }
    postorderDelete(root->left);
    postorderDelete(root->right);
    root->left=nullptr;
    root->right=nullptr;
    delete(root);
}
struct Node{
    Node* left;
    Node* right;
    int key;
};

Node* NewNode(int key)
{
    Node* node = new Node();
    node->key = key;
    node->left = nullptr;
    node->right = nullptr;
    return node;
}
